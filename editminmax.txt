from juego import Juego
from nodo import Nodo

juego = Juego()
juego.generar_tablero()
tablero, posicionJugadorMax, posicionJugadorMin = juego.obtener_tablero()
juego_terminado = juego.juego_terminado(tablero)
evaluar_estado = juego.evaluar_estado()
puntajeMax = juego.puntajeMax
puntajeMin = juego.puntajeMin
movimientos_posibles = juego.movimientos_posibles(tablero, 'Min')
realizarJugada = juego.realizarJugada(tablero,jugada,jugador)
oponente = juego.oponente()
complejidad_juego = juego.complejidad_juego()
alcanzar_casilla = juego.alcanzar_casilla()
jugadas_posiblesMax = juego.movimientos_posibles(tablero, 'Max')
jugadas_posiblesMin = juego.movimientos_posibles(tablero, 'Min')
obtenerTablero = juego.obtener_tablero(reset=True)

# MiniMax --------------------------------------------------------------------------------------------------------------------------------------------
def minimax(tablero, jugador, profundidad, alfa, beta):
    if profundidad == 0 or juego_terminado(tablero):
        # aqui deberia de retornar la utilidad final
        return evaluar_estado(puntajeMax, puntajeMin)

    if jugador == 'Max':
        # Esto es un infinito con numero negativos
        mejorValor = float("-inf")
        movimientos = movimientos_posibles(tablero, jugador)
        for jugada in movimientos:
            nuevoTablero = realizarJugada(tablero, jugada, jugador)
            valor = minimax(
                nuevoTablero, oponente(jugador), profundidad - 1)
            mejorValor = max(mejorValor, valor)
            alfa = max(alfa, mejorValor)
            if beta <= alfa:
                break  # Poda alfa-beta
        return mejorValor

    else:
        # Esto es un infinito con numero negativos
        mejorValor = float("inf")
        for jugada in movimientos_posibles(tablero, jugador):
            nuevoTablero = realizarJugada(tablero, jugada, jugador)
            valor = minimax(
                nuevoTablero, oponente(jugador), profundidad - 1)
            mejorValor = min(mejorValor, valor)
            beta = min(beta, mejorValor)
            if beta <= alfa:
                break  # Poda alfa-beta
        return mejorValor


def verificar_primer_movimiento_max(tablero, profundidad, jugador):
    movimientos_iniciales = movimientos_posibles(tablero, jugador)
    mejor_utilidad = float('-inf')
    alfa = float("-inf")
    beta = float("inf")
    mejor_movimiento = None

    for movimiento in movimientos_iniciales:
        nuevo_tablero = realizarJugada(tablero, movimiento, jugador)
        utilidad = minimax(nuevo_tablero, oponente(
            jugador), profundidad, alfa, beta)
        if utilidad > mejor_utilidad:
            mejor_utilidad = utilidad
            mejor_movimiento = movimiento

    return mejor_movimiento


# como para ir simulando lo
if __name__ == "__main__":
    profundidad = complejidad_juego('principiante')
    jugador = 'Min'

    while True:
        print("Tablero actual:")
        print(tableroGame)
        print("Turno del jugador 'Min'. Ingresa las coordenadas de la jugada (fila y columna separadas por espacios):")
        fila, columna = map(int, input().split())
        jugada_min = (fila, columna)

        if alcanzar_casilla(tableroGame, jugador, fila, columna):
            nuevo_tablero = realizarJugada(tableroGame, jugada_min, jugador)
            print("Jugada del jugador 'Min':", jugada_min)
            print("Nuevo tablero:")
            print(nuevo_tablero)

            if juego_terminado(nuevo_tablero):
                print("El juego ha terminado. ¡Ganó el jugador 'Min'!")
                break

            mejor_movimiento_max = verificar_primer_movimiento_max(
                nuevo_tablero, profundidad, 'Max')
            nuevo_tablero = realizarJugada(
                nuevo_tablero, mejor_movimiento_max, 'Max')
            print("Jugada del jugador 'Max':", mejor_movimiento_max)
            print("Nuevo tablero:")
            print(nuevo_tablero)

            if juego_terminado(nuevo_tablero):
                print("El juego ha terminado. ¡Ganó el jugador 'Max'!")
                break

            tableroGame = nuevo_tablero
        else:
            print("La jugada ingresada no es válida. Inténtalo de nuevo.")

print(tableroGame)
print(puntajeMin)
# aiuda esto no está dando lo que necesito :(
# print("jugada", verificar_primer_movimiento_max(tableroGame, 4, jugadorGame))
# print("puntaje", sumar_puntaje('Max', 5))
# print("como sigue el tablero", tableroGame)
# print("El pruntaje en max", puntajeMax)
# # print("tablero min", obtener_tablero(reset=True))
# # print("tablero max", obtener_tablero(reset=True))
# # print("movimientosPosibles Max", movimientos_posibles(tableroGame, 'Max'))
# # print("movimientosPosibles Min", movimientos_posibles(tableroGame, 'Min'))